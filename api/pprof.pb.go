// Code generated by protoc-gen-gogo.
// source: pprof.proto
// DO NOT EDIT!

/*
	Package api is a generated protocol buffer package.

	It is generated from these files:
		pprof.proto

	It has these top-level messages:
		Chunk
		CmdlineRequest
		CmdlineResponse
		CPUProfileRequest
		TraceRequest
		SymbolRequest
		LookupRequest
		SymbolResponse
		LookupResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Chunk is used by endpoints that send opaque chunks of data
type Chunk struct {
	Chunk []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (m *Chunk) Reset()                    { *m = Chunk{} }
func (m *Chunk) String() string            { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()               {}
func (*Chunk) Descriptor() ([]byte, []int) { return fileDescriptorPprof, []int{0} }

func (m *Chunk) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

// CmdlineRequest is used by the `PProfService` `Cmdline` endpoint.
// It is currently just an empty request.
type CmdlineRequest struct {
}

func (m *CmdlineRequest) Reset()                    { *m = CmdlineRequest{} }
func (m *CmdlineRequest) String() string            { return proto.CompactTextString(m) }
func (*CmdlineRequest) ProtoMessage()               {}
func (*CmdlineRequest) Descriptor() ([]byte, []int) { return fileDescriptorPprof, []int{1} }

// CmdlineResponse is responded by the `PProfService` `Cmdline` endpoint.
// It contains the command line options used to start the running process as a
// set of null-terminated strings.
type CmdlineResponse struct {
	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
}

func (m *CmdlineResponse) Reset()                    { *m = CmdlineResponse{} }
func (m *CmdlineResponse) String() string            { return proto.CompactTextString(m) }
func (*CmdlineResponse) ProtoMessage()               {}
func (*CmdlineResponse) Descriptor() ([]byte, []int) { return fileDescriptorPprof, []int{2} }

func (m *CmdlineResponse) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

// CPURequest is used with the `PProfService` `CPU` endpoint.
type CPUProfileRequest struct {
	Duration *google_protobuf.Duration `protobuf:"bytes,1,opt,name=duration" json:"duration,omitempty"`
}

func (m *CPUProfileRequest) Reset()                    { *m = CPUProfileRequest{} }
func (m *CPUProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*CPUProfileRequest) ProtoMessage()               {}
func (*CPUProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorPprof, []int{3} }

func (m *CPUProfileRequest) GetDuration() *google_protobuf.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

// CPURequest is used with the `PProfService` `Trace` endpoint.
type TraceRequest struct {
	Duration *google_protobuf.Duration `protobuf:"bytes,1,opt,name=duration" json:"duration,omitempty"`
}

func (m *TraceRequest) Reset()                    { *m = TraceRequest{} }
func (m *TraceRequest) String() string            { return proto.CompactTextString(m) }
func (*TraceRequest) ProtoMessage()               {}
func (*TraceRequest) Descriptor() ([]byte, []int) { return fileDescriptorPprof, []int{4} }

func (m *TraceRequest) GetDuration() *google_protobuf.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

// SymbolRequest is used with the `PProfService` `Symbol` endpoint.
type SymbolRequest struct {
	Symbol uint64 `protobuf:"varint,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (m *SymbolRequest) Reset()                    { *m = SymbolRequest{} }
func (m *SymbolRequest) String() string            { return proto.CompactTextString(m) }
func (*SymbolRequest) ProtoMessage()               {}
func (*SymbolRequest) Descriptor() ([]byte, []int) { return fileDescriptorPprof, []int{5} }

func (m *SymbolRequest) GetSymbol() uint64 {
	if m != nil {
		return m.Symbol
	}
	return 0
}

// LookupRequest is used with the `PProfService` `Lookup` endpoint.
// It is used to specify the profile data to lookup, e.g. `goroutine`, `heap`.
// See https://golang.org/pkg/runtime/pprof/#PProf
type LookupRequest struct {
	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Debug        int32  `protobuf:"varint,2,opt,name=debug,proto3" json:"debug,omitempty"`
	GcBeforeHeap bool   `protobuf:"varint,3,opt,name=gc_before_heap,json=gcBeforeHeap,proto3" json:"gc_before_heap,omitempty"`
}

func (m *LookupRequest) Reset()                    { *m = LookupRequest{} }
func (m *LookupRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupRequest) ProtoMessage()               {}
func (*LookupRequest) Descriptor() ([]byte, []int) { return fileDescriptorPprof, []int{6} }

func (m *LookupRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LookupRequest) GetDebug() int32 {
	if m != nil {
		return m.Debug
	}
	return 0
}

func (m *LookupRequest) GetGcBeforeHeap() bool {
	if m != nil {
		return m.GcBeforeHeap
	}
	return false
}

// SymbolResponse is used with the `PProfService` `Symbol` endpoint.
// It returns the name/symbol mapping
type SymbolResponse struct {
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Symbol uint64 `protobuf:"varint,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (m *SymbolResponse) Reset()                    { *m = SymbolResponse{} }
func (m *SymbolResponse) String() string            { return proto.CompactTextString(m) }
func (*SymbolResponse) ProtoMessage()               {}
func (*SymbolResponse) Descriptor() ([]byte, []int) { return fileDescriptorPprof, []int{7} }

func (m *SymbolResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SymbolResponse) GetSymbol() uint64 {
	if m != nil {
		return m.Symbol
	}
	return 0
}

// LookupResponse is used with the `PProfService` `Lookup` endpoint.
// containing an opaque blob suitable for consumption by pprof tooling.
type LookupResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *LookupResponse) Reset()                    { *m = LookupResponse{} }
func (m *LookupResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupResponse) ProtoMessage()               {}
func (*LookupResponse) Descriptor() ([]byte, []int) { return fileDescriptorPprof, []int{8} }

func (m *LookupResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Chunk)(nil), "Chunk")
	proto.RegisterType((*CmdlineRequest)(nil), "CmdlineRequest")
	proto.RegisterType((*CmdlineResponse)(nil), "CmdlineResponse")
	proto.RegisterType((*CPUProfileRequest)(nil), "CPUProfileRequest")
	proto.RegisterType((*TraceRequest)(nil), "TraceRequest")
	proto.RegisterType((*SymbolRequest)(nil), "SymbolRequest")
	proto.RegisterType((*LookupRequest)(nil), "LookupRequest")
	proto.RegisterType((*SymbolResponse)(nil), "SymbolResponse")
	proto.RegisterType((*LookupResponse)(nil), "LookupResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PProfService service

type PProfServiceClient interface {
	Cmdline(ctx context.Context, in *CmdlineRequest, opts ...grpc.CallOption) (*CmdlineResponse, error)
	CPUProfile(ctx context.Context, in *CPUProfileRequest, opts ...grpc.CallOption) (PProfService_CPUProfileClient, error)
	Trace(ctx context.Context, in *TraceRequest, opts ...grpc.CallOption) (PProfService_TraceClient, error)
	Symbol(ctx context.Context, in *SymbolRequest, opts ...grpc.CallOption) (*SymbolResponse, error)
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
}

type pProfServiceClient struct {
	cc *grpc.ClientConn
}

func NewPProfServiceClient(cc *grpc.ClientConn) PProfServiceClient {
	return &pProfServiceClient{cc}
}

func (c *pProfServiceClient) Cmdline(ctx context.Context, in *CmdlineRequest, opts ...grpc.CallOption) (*CmdlineResponse, error) {
	out := new(CmdlineResponse)
	err := grpc.Invoke(ctx, "/PProfService/Cmdline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pProfServiceClient) CPUProfile(ctx context.Context, in *CPUProfileRequest, opts ...grpc.CallOption) (PProfService_CPUProfileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PProfService_serviceDesc.Streams[0], c.cc, "/PProfService/CPUProfile", opts...)
	if err != nil {
		return nil, err
	}
	x := &pProfServiceCPUProfileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PProfService_CPUProfileClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type pProfServiceCPUProfileClient struct {
	grpc.ClientStream
}

func (x *pProfServiceCPUProfileClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pProfServiceClient) Trace(ctx context.Context, in *TraceRequest, opts ...grpc.CallOption) (PProfService_TraceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PProfService_serviceDesc.Streams[1], c.cc, "/PProfService/Trace", opts...)
	if err != nil {
		return nil, err
	}
	x := &pProfServiceTraceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PProfService_TraceClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type pProfServiceTraceClient struct {
	grpc.ClientStream
}

func (x *pProfServiceTraceClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pProfServiceClient) Symbol(ctx context.Context, in *SymbolRequest, opts ...grpc.CallOption) (*SymbolResponse, error) {
	out := new(SymbolResponse)
	err := grpc.Invoke(ctx, "/PProfService/Symbol", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pProfServiceClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := grpc.Invoke(ctx, "/PProfService/Lookup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PProfService service

type PProfServiceServer interface {
	Cmdline(context.Context, *CmdlineRequest) (*CmdlineResponse, error)
	CPUProfile(*CPUProfileRequest, PProfService_CPUProfileServer) error
	Trace(*TraceRequest, PProfService_TraceServer) error
	Symbol(context.Context, *SymbolRequest) (*SymbolResponse, error)
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
}

func RegisterPProfServiceServer(s *grpc.Server, srv PProfServiceServer) {
	s.RegisterService(&_PProfService_serviceDesc, srv)
}

func _PProfService_Cmdline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PProfServiceServer).Cmdline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PProfService/Cmdline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PProfServiceServer).Cmdline(ctx, req.(*CmdlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PProfService_CPUProfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CPUProfileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PProfServiceServer).CPUProfile(m, &pProfServiceCPUProfileServer{stream})
}

type PProfService_CPUProfileServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type pProfServiceCPUProfileServer struct {
	grpc.ServerStream
}

func (x *pProfServiceCPUProfileServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _PProfService_Trace_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TraceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PProfServiceServer).Trace(m, &pProfServiceTraceServer{stream})
}

type PProfService_TraceServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type pProfServiceTraceServer struct {
	grpc.ServerStream
}

func (x *pProfServiceTraceServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _PProfService_Symbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SymbolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PProfServiceServer).Symbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PProfService/Symbol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PProfServiceServer).Symbol(ctx, req.(*SymbolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PProfService_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PProfServiceServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PProfService/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PProfServiceServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PProfService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PProfService",
	HandlerType: (*PProfServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cmdline",
			Handler:    _PProfService_Cmdline_Handler,
		},
		{
			MethodName: "Symbol",
			Handler:    _PProfService_Symbol_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _PProfService_Lookup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CPUProfile",
			Handler:       _PProfService_CPUProfile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Trace",
			Handler:       _PProfService_Trace_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pprof.proto",
}

func (m *Chunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chunk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Chunk) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPprof(dAtA, i, uint64(len(m.Chunk)))
		i += copy(dAtA[i:], m.Chunk)
	}
	return i, nil
}

func (m *CmdlineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdlineRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CmdlineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdlineResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Command) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPprof(dAtA, i, uint64(len(m.Command)))
		i += copy(dAtA[i:], m.Command)
	}
	return i, nil
}

func (m *CPUProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CPUProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Duration != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPprof(dAtA, i, uint64(m.Duration.Size()))
		n1, err := m.Duration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *TraceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TraceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Duration != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPprof(dAtA, i, uint64(m.Duration.Size()))
		n2, err := m.Duration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *SymbolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SymbolRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Symbol != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPprof(dAtA, i, uint64(m.Symbol))
	}
	return i, nil
}

func (m *LookupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPprof(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Debug != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPprof(dAtA, i, uint64(m.Debug))
	}
	if m.GcBeforeHeap {
		dAtA[i] = 0x18
		i++
		if m.GcBeforeHeap {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *SymbolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SymbolResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPprof(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Symbol != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPprof(dAtA, i, uint64(m.Symbol))
	}
	return i, nil
}

func (m *LookupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPprof(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func encodeFixed64Pprof(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Pprof(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPprof(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Chunk) Size() (n int) {
	var l int
	_ = l
	l = len(m.Chunk)
	if l > 0 {
		n += 1 + l + sovPprof(uint64(l))
	}
	return n
}

func (m *CmdlineRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CmdlineResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Command)
	if l > 0 {
		n += 1 + l + sovPprof(uint64(l))
	}
	return n
}

func (m *CPUProfileRequest) Size() (n int) {
	var l int
	_ = l
	if m.Duration != nil {
		l = m.Duration.Size()
		n += 1 + l + sovPprof(uint64(l))
	}
	return n
}

func (m *TraceRequest) Size() (n int) {
	var l int
	_ = l
	if m.Duration != nil {
		l = m.Duration.Size()
		n += 1 + l + sovPprof(uint64(l))
	}
	return n
}

func (m *SymbolRequest) Size() (n int) {
	var l int
	_ = l
	if m.Symbol != 0 {
		n += 1 + sovPprof(uint64(m.Symbol))
	}
	return n
}

func (m *LookupRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPprof(uint64(l))
	}
	if m.Debug != 0 {
		n += 1 + sovPprof(uint64(m.Debug))
	}
	if m.GcBeforeHeap {
		n += 2
	}
	return n
}

func (m *SymbolResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPprof(uint64(l))
	}
	if m.Symbol != 0 {
		n += 1 + sovPprof(uint64(m.Symbol))
	}
	return n
}

func (m *LookupResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPprof(uint64(l))
	}
	return n
}

func sovPprof(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPprof(x uint64) (n int) {
	return sovPprof(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Chunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPprof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPprof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPprof
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunk = append(m.Chunk[:0], dAtA[iNdEx:postIndex]...)
			if m.Chunk == nil {
				m.Chunk = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPprof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPprof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdlineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPprof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdlineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdlineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPprof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPprof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CmdlineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPprof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdlineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdlineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPprof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPprof
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Command = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPprof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPprof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CPUProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPprof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CPUProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CPUProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPprof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPprof
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = &google_protobuf.Duration{}
			}
			if err := m.Duration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPprof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPprof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TraceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPprof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TraceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TraceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPprof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPprof
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = &google_protobuf.Duration{}
			}
			if err := m.Duration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPprof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPprof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SymbolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPprof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SymbolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SymbolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			m.Symbol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPprof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Symbol |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPprof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPprof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPprof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPprof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPprof
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			m.Debug = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPprof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Debug |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GcBeforeHeap", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPprof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GcBeforeHeap = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPprof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPprof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SymbolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPprof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SymbolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SymbolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPprof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPprof
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			m.Symbol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPprof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Symbol |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPprof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPprof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPprof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPprof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPprof
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPprof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPprof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPprof(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPprof
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPprof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPprof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPprof
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPprof
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPprof(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPprof = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPprof   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pprof.proto", fileDescriptorPprof) }

var fileDescriptorPprof = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x92, 0xdf, 0x8e, 0x93, 0x40,
	0x14, 0xc6, 0x99, 0x75, 0x61, 0xd7, 0xb3, 0x14, 0xea, 0xc4, 0x18, 0x24, 0x91, 0x34, 0x93, 0x4d,
	0x6c, 0xb2, 0x66, 0xd6, 0xd4, 0x78, 0xe7, 0x55, 0xab, 0x89, 0x31, 0x5e, 0x34, 0x54, 0xaf, 0x9b,
	0x01, 0x06, 0x4a, 0x0a, 0x0c, 0xf2, 0xc7, 0xc4, 0x37, 0xf1, 0x91, 0xbc, 0xf4, 0x11, 0x4c, 0xbd,
	0xf3, 0x29, 0x0c, 0x03, 0xd3, 0x8a, 0x7a, 0xb7, 0x77, 0xf3, 0x1d, 0xbe, 0x39, 0x7c, 0xe7, 0xfc,
	0x06, 0xae, 0xca, 0xb2, 0x12, 0x31, 0x2d, 0x2b, 0xd1, 0x08, 0xd7, 0x4b, 0x84, 0x48, 0x32, 0x7e,
	0x2b, 0x55, 0xd0, 0xc6, 0xb7, 0x51, 0x5b, 0xb1, 0x26, 0x15, 0x45, 0xff, 0x9d, 0x3c, 0x01, 0x7d,
	0xb5, 0x6b, 0x8b, 0x3d, 0x7e, 0x08, 0x7a, 0xd8, 0x1d, 0x1c, 0x34, 0x43, 0x73, 0xd3, 0xef, 0x05,
	0x99, 0x82, 0xb5, 0xca, 0xa3, 0x2c, 0x2d, 0xb8, 0xcf, 0x3f, 0xb5, 0xbc, 0x6e, 0xc8, 0x0d, 0xd8,
	0xc7, 0x4a, 0x5d, 0x8a, 0xa2, 0xe6, 0xd8, 0x81, 0x8b, 0x50, 0xe4, 0x39, 0x2b, 0x22, 0x79, 0xf9,
	0xbe, 0xaf, 0x24, 0x79, 0x07, 0x0f, 0x56, 0xeb, 0x8f, 0xeb, 0x4a, 0xc4, 0x69, 0xa6, 0x3a, 0xe0,
	0x97, 0x70, 0xa9, 0x42, 0x48, 0xff, 0xd5, 0xe2, 0x31, 0xed, 0x53, 0x52, 0x95, 0x92, 0xbe, 0x1e,
	0x0c, 0xfe, 0xd1, 0x4a, 0xde, 0x80, 0xf9, 0xa1, 0x62, 0xe1, 0x5d, 0xdb, 0x3c, 0x85, 0xc9, 0xe6,
	0x4b, 0x1e, 0x88, 0x4c, 0xf5, 0x79, 0x04, 0x46, 0x2d, 0x0b, 0xb2, 0xcb, 0xb9, 0x3f, 0x28, 0xb2,
	0x85, 0xc9, 0x7b, 0x21, 0xf6, 0x6d, 0xa9, 0x8c, 0x18, 0xce, 0x0b, 0x96, 0xf3, 0x61, 0x46, 0x79,
	0xee, 0xb6, 0x16, 0xf1, 0xa0, 0x4d, 0x9c, 0xb3, 0x19, 0x9a, 0xeb, 0x7e, 0x2f, 0xf0, 0x35, 0x58,
	0x49, 0xb8, 0x0d, 0x78, 0x2c, 0x2a, 0xbe, 0xdd, 0x71, 0x56, 0x3a, 0xf7, 0x66, 0x68, 0x7e, 0xe9,
	0x9b, 0x49, 0xb8, 0x94, 0xc5, 0xb7, 0x9c, 0x95, 0xe4, 0x15, 0x58, 0x2a, 0xc9, 0xb0, 0xc8, 0xff,
	0xfd, 0xe1, 0x14, 0xef, 0x6c, 0x14, 0xef, 0x1a, 0x2c, 0x15, 0xef, 0x74, 0x3b, 0x62, 0x0d, 0x1b,
	0x00, 0xca, 0xf3, 0xe2, 0x17, 0x02, 0x73, 0xdd, 0xed, 0x7f, 0xc3, 0xab, 0xcf, 0x69, 0xc8, 0x31,
	0x85, 0x8b, 0x01, 0x1f, 0xb6, 0xe9, 0x18, 0xad, 0x3b, 0xa5, 0x7f, 0x91, 0x25, 0x1a, 0x7e, 0x06,
	0x70, 0x22, 0x88, 0x31, 0xfd, 0x07, 0xa7, 0x6b, 0x50, 0xf9, 0x80, 0x88, 0xf6, 0x1c, 0x61, 0x02,
	0xba, 0x64, 0x84, 0x27, 0xf4, 0x4f, 0x56, 0x23, 0xcf, 0x0d, 0x18, 0xfd, 0xd8, 0xd8, 0xa2, 0x23,
	0x12, 0xae, 0x4d, 0xc7, 0xfb, 0x20, 0x5a, 0x67, 0xee, 0xa7, 0xc4, 0x16, 0x1d, 0xd1, 0x70, 0x6d,
	0x3a, 0x1e, 0x9f, 0x68, 0xcb, 0xe9, 0xb7, 0x83, 0x87, 0xbe, 0x1f, 0x3c, 0xf4, 0xe3, 0xe0, 0xa1,
	0xaf, 0x3f, 0x3d, 0x2d, 0x30, 0xe4, 0x4b, 0x78, 0xf1, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x27,
	0x24, 0xd1, 0x13, 0x03, 0x00, 0x00,
}
